//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("TerritoriesModel", "ADDRESSESKEY0", "Cities", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TerritoriesManagement.Model.City), "Addresses", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TerritoriesManagement.Model.Address))]
[assembly: EdmRelationshipAttribute("TerritoriesModel", "ADDRESSESKEY1", "Territories", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(TerritoriesManagement.Model.Territory), "Addresses", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TerritoriesManagement.Model.Address))]
[assembly: EdmRelationshipAttribute("TerritoriesModel", "CITIESKEY0", "Departments", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TerritoriesManagement.Model.Department), "Cities", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TerritoriesManagement.Model.City))]
[assembly: EdmRelationshipAttribute("TerritoriesModel", "PUBLISHERSKEY0", "Cities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(TerritoriesManagement.Model.City), "Publishers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TerritoriesManagement.Model.Publisher))]
[assembly: EdmRelationshipAttribute("TerritoriesModel", "TOURSKEY0", "Publishers", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(TerritoriesManagement.Model.Publisher), "Tours", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TerritoriesManagement.Model.Tour))]
[assembly: EdmRelationshipAttribute("TerritoriesModel", "TOURSKEY1", "Territories", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TerritoriesManagement.Model.Territory), "Tours", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TerritoriesManagement.Model.Tour), true)]

#endregion

namespace TerritoriesManagement.Model
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class TerritoriesDataContext : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new TerritoriesDataContext object using the connection string found in the 'TerritoriesDataContext' section of the application configuration file.
        /// </summary>
        public TerritoriesDataContext() : base("name=TerritoriesDataContext", "TerritoriesDataContext")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TerritoriesDataContext object.
        /// </summary>
        public TerritoriesDataContext(string connectionString) : base(connectionString, "TerritoriesDataContext")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TerritoriesDataContext object.
        /// </summary>
        public TerritoriesDataContext(EntityConnection connection) : base(connection, "TerritoriesDataContext")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Address> Addresses
        {
            get
            {
                if ((_Addresses == null))
                {
                    _Addresses = base.CreateObjectSet<Address>("Addresses");
                }
                return _Addresses;
            }
        }
        private ObjectSet<Address> _Addresses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<City> Cities
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<City>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<City> _Cities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Department> Departments
        {
            get
            {
                if ((_Departments == null))
                {
                    _Departments = base.CreateObjectSet<Department>("Departments");
                }
                return _Departments;
            }
        }
        private ObjectSet<Department> _Departments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Publisher> Publishers
        {
            get
            {
                if ((_Publishers == null))
                {
                    _Publishers = base.CreateObjectSet<Publisher>("Publishers");
                }
                return _Publishers;
            }
        }
        private ObjectSet<Publisher> _Publishers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Territory> Territories
        {
            get
            {
                if ((_Territories == null))
                {
                    _Territories = base.CreateObjectSet<Territory>("Territories");
                }
                return _Territories;
            }
        }
        private ObjectSet<Territory> _Territories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Tour> Tours
        {
            get
            {
                if ((_Tours == null))
                {
                    _Tours = base.CreateObjectSet<Tour>("Tours");
                }
                return _Tours;
            }
        }
        private ObjectSet<Tour> _Tours;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Addresses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAddresses(Address address)
        {
            base.AddObject("Addresses", address);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCities(City city)
        {
            base.AddObject("Cities", city);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Departments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDepartments(Department department)
        {
            base.AddObject("Departments", department);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Publishers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPublishers(Publisher publisher)
        {
            base.AddObject("Publishers", publisher);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Territories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTerritories(Territory territory)
        {
            base.AddObject("Territories", territory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tours EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTours(Tour tour)
        {
            base.AddObject("Tours", tour);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<Address> addresses_GetAll()
        {
            return base.ExecuteFunction<Address>("addresses_GetAll");
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<Address> addresses_GetAll(MergeOption mergeOption)
        {
            return base.ExecuteFunction<Address>("addresses_GetAll", mergeOption);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="cITY">No Metadata Documentation available.</param>
        public ObjectResult<Address> addresses_GetByCity(Nullable<global::System.Int32> cITY)
        {
            ObjectParameter cITYParameter;
            if (cITY.HasValue)
            {
                cITYParameter = new ObjectParameter("CITY", cITY);
            }
            else
            {
                cITYParameter = new ObjectParameter("CITY", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Address>("addresses_GetByCity", cITYParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="cITY">No Metadata Documentation available.</param>
        public ObjectResult<Address> addresses_GetByCity(Nullable<global::System.Int32> cITY, MergeOption mergeOption)
        {
            ObjectParameter cITYParameter;
            if (cITY.HasValue)
            {
                cITYParameter = new ObjectParameter("CITY", cITY);
            }
            else
            {
                cITYParameter = new ObjectParameter("CITY", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Address>("addresses_GetByCity", mergeOption, cITYParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iD">No Metadata Documentation available.</param>
        public ObjectResult<Address> addresses_GetById(Nullable<global::System.Int32> iD)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Address>("addresses_GetById", iDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="iD">No Metadata Documentation available.</param>
        public ObjectResult<Address> addresses_GetById(Nullable<global::System.Int32> iD, MergeOption mergeOption)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Address>("addresses_GetById", mergeOption, iDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<City> cities_GetAll()
        {
            return base.ExecuteFunction<City>("cities_GetAll");
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<City> cities_GetAll(MergeOption mergeOption)
        {
            return base.ExecuteFunction<City>("cities_GetAll", mergeOption);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="dEPARTMENT">No Metadata Documentation available.</param>
        public ObjectResult<City> cities_GetByDepartment(Nullable<global::System.Int32> dEPARTMENT)
        {
            ObjectParameter dEPARTMENTParameter;
            if (dEPARTMENT.HasValue)
            {
                dEPARTMENTParameter = new ObjectParameter("DEPARTMENT", dEPARTMENT);
            }
            else
            {
                dEPARTMENTParameter = new ObjectParameter("DEPARTMENT", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<City>("cities_GetByDepartment", dEPARTMENTParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="dEPARTMENT">No Metadata Documentation available.</param>
        public ObjectResult<City> cities_GetByDepartment(Nullable<global::System.Int32> dEPARTMENT, MergeOption mergeOption)
        {
            ObjectParameter dEPARTMENTParameter;
            if (dEPARTMENT.HasValue)
            {
                dEPARTMENTParameter = new ObjectParameter("DEPARTMENT", dEPARTMENT);
            }
            else
            {
                dEPARTMENTParameter = new ObjectParameter("DEPARTMENT", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<City>("cities_GetByDepartment", mergeOption, dEPARTMENTParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iD">No Metadata Documentation available.</param>
        public ObjectResult<City> cities_GetById(Nullable<global::System.Int32> iD)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<City>("cities_GetById", iDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="iD">No Metadata Documentation available.</param>
        public ObjectResult<City> cities_GetById(Nullable<global::System.Int32> iD, MergeOption mergeOption)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<City>("cities_GetById", mergeOption, iDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<Department> departments_GetAll()
        {
            return base.ExecuteFunction<Department>("departments_GetAll");
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<Department> departments_GetAll(MergeOption mergeOption)
        {
            return base.ExecuteFunction<Department>("departments_GetAll", mergeOption);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iD">No Metadata Documentation available.</param>
        public ObjectResult<Department> departments_GetById(Nullable<global::System.Int32> iD)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Department>("departments_GetById", iDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="iD">No Metadata Documentation available.</param>
        public ObjectResult<Department> departments_GetById(Nullable<global::System.Int32> iD, MergeOption mergeOption)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Department>("departments_GetById", mergeOption, iDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<Publisher> publishers_GetByCity()
        {
            return base.ExecuteFunction<Publisher>("publishers_GetByCity");
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<Publisher> publishers_GetByCity(MergeOption mergeOption)
        {
            return base.ExecuteFunction<Publisher>("publishers_GetByCity", mergeOption);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<Territory> territories_GetAll()
        {
            return base.ExecuteFunction<Territory>("territories_GetAll");
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<Territory> territories_GetAll(MergeOption mergeOption)
        {
            return base.ExecuteFunction<Territory>("territories_GetAll", mergeOption);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iD">No Metadata Documentation available.</param>
        public ObjectResult<Territory> territories_GetById(Nullable<global::System.Int32> iD)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Territory>("territories_GetById", iDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="iD">No Metadata Documentation available.</param>
        public ObjectResult<Territory> territories_GetById(Nullable<global::System.Int32> iD, MergeOption mergeOption)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Territory>("territories_GetById", mergeOption, iDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="nEWID">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> addresses_ResetId(Nullable<global::System.Int32> nEWID)
        {
            ObjectParameter nEWIDParameter;
            if (nEWID.HasValue)
            {
                nEWIDParameter = new ObjectParameter("NEWID", nEWID);
            }
            else
            {
                nEWIDParameter = new ObjectParameter("NEWID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("addresses_ResetId", nEWIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="nEWID">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> cities_ResetId(Nullable<global::System.Int32> nEWID)
        {
            ObjectParameter nEWIDParameter;
            if (nEWID.HasValue)
            {
                nEWIDParameter = new ObjectParameter("NEWID", nEWID);
            }
            else
            {
                nEWIDParameter = new ObjectParameter("NEWID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("cities_ResetId", nEWIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="nEWID">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> departments_ResetId(Nullable<global::System.Int32> nEWID)
        {
            ObjectParameter nEWIDParameter;
            if (nEWID.HasValue)
            {
                nEWIDParameter = new ObjectParameter("NEWID", nEWID);
            }
            else
            {
                nEWIDParameter = new ObjectParameter("NEWID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("departments_ResetId", nEWIDParameter);
        }
    
            
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iD">No Metadata Documentation available.</param>
        /// <param name="nAME">No Metadata Documentation available.</param>
        /// <param name="aREA">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> departments_AddWithPK(Nullable<global::System.Int32> iD, global::System.String nAME, global::System.String aREA)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            ObjectParameter nAMEParameter;
            if (nAME != null)
            {
                nAMEParameter = new ObjectParameter("NAME", nAME);
            }
            else
            {
                nAMEParameter = new ObjectParameter("NAME", typeof(global::System.String));
            }
    
            ObjectParameter aREAParameter;
            if (aREA != null)
            {
                aREAParameter = new ObjectParameter("AREA", aREA);
            }
            else
            {
                aREAParameter = new ObjectParameter("AREA", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("departments_AddWithPK", iDParameter, nAMEParameter, aREAParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iD">No Metadata Documentation available.</param>
        /// <param name="nAME">No Metadata Documentation available.</param>
        /// <param name="iDDEPARTMENT">No Metadata Documentation available.</param>
        /// <param name="aREA">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> cities_AddWithPK(Nullable<global::System.Int32> iD, global::System.String nAME, Nullable<global::System.Int32> iDDEPARTMENT, global::System.String aREA)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            ObjectParameter nAMEParameter;
            if (nAME != null)
            {
                nAMEParameter = new ObjectParameter("NAME", nAME);
            }
            else
            {
                nAMEParameter = new ObjectParameter("NAME", typeof(global::System.String));
            }
    
            ObjectParameter iDDEPARTMENTParameter;
            if (iDDEPARTMENT.HasValue)
            {
                iDDEPARTMENTParameter = new ObjectParameter("IDDEPARTMENT", iDDEPARTMENT);
            }
            else
            {
                iDDEPARTMENTParameter = new ObjectParameter("IDDEPARTMENT", typeof(global::System.Int32));
            }
    
            ObjectParameter aREAParameter;
            if (aREA != null)
            {
                aREAParameter = new ObjectParameter("AREA", aREA);
            }
            else
            {
                aREAParameter = new ObjectParameter("AREA", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("cities_AddWithPK", iDParameter, nAMEParameter, iDDEPARTMENTParameter, aREAParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iD">No Metadata Documentation available.</param>
        /// <param name="nAME">No Metadata Documentation available.</param>
        /// <param name="nUMBER">No Metadata Documentation available.</param>
        /// <param name="aREA">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> territories_AddWithPK(Nullable<global::System.Int32> iD, global::System.String nAME, Nullable<global::System.Int32> nUMBER, global::System.String aREA)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            ObjectParameter nAMEParameter;
            if (nAME != null)
            {
                nAMEParameter = new ObjectParameter("NAME", nAME);
            }
            else
            {
                nAMEParameter = new ObjectParameter("NAME", typeof(global::System.String));
            }
    
            ObjectParameter nUMBERParameter;
            if (nUMBER.HasValue)
            {
                nUMBERParameter = new ObjectParameter("NUMBER", nUMBER);
            }
            else
            {
                nUMBERParameter = new ObjectParameter("NUMBER", typeof(global::System.Int32));
            }
    
            ObjectParameter aREAParameter;
            if (aREA != null)
            {
                aREAParameter = new ObjectParameter("AREA", aREA);
            }
            else
            {
                aREAParameter = new ObjectParameter("AREA", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("territories_AddWithPK", iDParameter, nAMEParameter, nUMBERParameter, aREAParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iDADDRESS">No Metadata Documentation available.</param>
        /// <param name="sTREET">No Metadata Documentation available.</param>
        /// <param name="nUMBER">No Metadata Documentation available.</param>
        /// <param name="aDDRESSDATA">No Metadata Documentation available.</param>
        /// <param name="cORNER1">No Metadata Documentation available.</param>
        /// <param name="cORNER2">No Metadata Documentation available.</param>
        /// <param name="pHONE1">No Metadata Documentation available.</param>
        /// <param name="pHONE2">No Metadata Documentation available.</param>
        /// <param name="dESCRIPTION">No Metadata Documentation available.</param>
        /// <param name="mAP1">No Metadata Documentation available.</param>
        /// <param name="mAP2">No Metadata Documentation available.</param>
        /// <param name="iDTERRITORY">No Metadata Documentation available.</param>
        /// <param name="iDCITY">No Metadata Documentation available.</param>
        /// <param name="cUSTOMFIELD1">No Metadata Documentation available.</param>
        /// <param name="cUSTOMFIELD2">No Metadata Documentation available.</param>
        /// <param name="lAT">No Metadata Documentation available.</param>
        /// <param name="lNG">No Metadata Documentation available.</param>
        /// <param name="iNTERNALTERRITORYNUMBER">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> addresses_AddWithPK(Nullable<global::System.Int32> iDADDRESS, global::System.String sTREET, global::System.String nUMBER, global::System.String aDDRESSDATA, global::System.String cORNER1, global::System.String cORNER2, global::System.String pHONE1, global::System.String pHONE2, global::System.String dESCRIPTION, global::System.String mAP1, global::System.String mAP2, Nullable<global::System.Int32> iDTERRITORY, Nullable<global::System.Int32> iDCITY, global::System.String cUSTOMFIELD1, global::System.String cUSTOMFIELD2, Nullable<global::System.Double> lAT, Nullable<global::System.Double> lNG, Nullable<global::System.Int32> iNTERNALTERRITORYNUMBER)
        {
            ObjectParameter iDADDRESSParameter;
            if (iDADDRESS.HasValue)
            {
                iDADDRESSParameter = new ObjectParameter("IDADDRESS", iDADDRESS);
            }
            else
            {
                iDADDRESSParameter = new ObjectParameter("IDADDRESS", typeof(global::System.Int32));
            }
    
            ObjectParameter sTREETParameter;
            if (sTREET != null)
            {
                sTREETParameter = new ObjectParameter("STREET", sTREET);
            }
            else
            {
                sTREETParameter = new ObjectParameter("STREET", typeof(global::System.String));
            }
    
            ObjectParameter nUMBERParameter;
            if (nUMBER != null)
            {
                nUMBERParameter = new ObjectParameter("NUMBER", nUMBER);
            }
            else
            {
                nUMBERParameter = new ObjectParameter("NUMBER", typeof(global::System.String));
            }
    
            ObjectParameter aDDRESSDATAParameter;
            if (aDDRESSDATA != null)
            {
                aDDRESSDATAParameter = new ObjectParameter("ADDRESSDATA", aDDRESSDATA);
            }
            else
            {
                aDDRESSDATAParameter = new ObjectParameter("ADDRESSDATA", typeof(global::System.String));
            }
    
            ObjectParameter cORNER1Parameter;
            if (cORNER1 != null)
            {
                cORNER1Parameter = new ObjectParameter("CORNER1", cORNER1);
            }
            else
            {
                cORNER1Parameter = new ObjectParameter("CORNER1", typeof(global::System.String));
            }
    
            ObjectParameter cORNER2Parameter;
            if (cORNER2 != null)
            {
                cORNER2Parameter = new ObjectParameter("CORNER2", cORNER2);
            }
            else
            {
                cORNER2Parameter = new ObjectParameter("CORNER2", typeof(global::System.String));
            }
    
            ObjectParameter pHONE1Parameter;
            if (pHONE1 != null)
            {
                pHONE1Parameter = new ObjectParameter("PHONE1", pHONE1);
            }
            else
            {
                pHONE1Parameter = new ObjectParameter("PHONE1", typeof(global::System.String));
            }
    
            ObjectParameter pHONE2Parameter;
            if (pHONE2 != null)
            {
                pHONE2Parameter = new ObjectParameter("PHONE2", pHONE2);
            }
            else
            {
                pHONE2Parameter = new ObjectParameter("PHONE2", typeof(global::System.String));
            }
    
            ObjectParameter dESCRIPTIONParameter;
            if (dESCRIPTION != null)
            {
                dESCRIPTIONParameter = new ObjectParameter("DESCRIPTION", dESCRIPTION);
            }
            else
            {
                dESCRIPTIONParameter = new ObjectParameter("DESCRIPTION", typeof(global::System.String));
            }
    
            ObjectParameter mAP1Parameter;
            if (mAP1 != null)
            {
                mAP1Parameter = new ObjectParameter("MAP1", mAP1);
            }
            else
            {
                mAP1Parameter = new ObjectParameter("MAP1", typeof(global::System.String));
            }
    
            ObjectParameter mAP2Parameter;
            if (mAP2 != null)
            {
                mAP2Parameter = new ObjectParameter("MAP2", mAP2);
            }
            else
            {
                mAP2Parameter = new ObjectParameter("MAP2", typeof(global::System.String));
            }
    
            ObjectParameter iDTERRITORYParameter;
            if (iDTERRITORY.HasValue)
            {
                iDTERRITORYParameter = new ObjectParameter("IDTERRITORY", iDTERRITORY);
            }
            else
            {
                iDTERRITORYParameter = new ObjectParameter("IDTERRITORY", typeof(global::System.Int32));
            }
    
            ObjectParameter iDCITYParameter;
            if (iDCITY.HasValue)
            {
                iDCITYParameter = new ObjectParameter("IDCITY", iDCITY);
            }
            else
            {
                iDCITYParameter = new ObjectParameter("IDCITY", typeof(global::System.Int32));
            }
    
            ObjectParameter cUSTOMFIELD1Parameter;
            if (cUSTOMFIELD1 != null)
            {
                cUSTOMFIELD1Parameter = new ObjectParameter("CUSTOMFIELD1", cUSTOMFIELD1);
            }
            else
            {
                cUSTOMFIELD1Parameter = new ObjectParameter("CUSTOMFIELD1", typeof(global::System.String));
            }
    
            ObjectParameter cUSTOMFIELD2Parameter;
            if (cUSTOMFIELD2 != null)
            {
                cUSTOMFIELD2Parameter = new ObjectParameter("CUSTOMFIELD2", cUSTOMFIELD2);
            }
            else
            {
                cUSTOMFIELD2Parameter = new ObjectParameter("CUSTOMFIELD2", typeof(global::System.String));
            }
    
            ObjectParameter lATParameter;
            if (lAT.HasValue)
            {
                lATParameter = new ObjectParameter("LAT", lAT);
            }
            else
            {
                lATParameter = new ObjectParameter("LAT", typeof(global::System.Double));
            }
    
            ObjectParameter lNGParameter;
            if (lNG.HasValue)
            {
                lNGParameter = new ObjectParameter("LNG", lNG);
            }
            else
            {
                lNGParameter = new ObjectParameter("LNG", typeof(global::System.Double));
            }
    
            ObjectParameter iNTERNALTERRITORYNUMBERParameter;
            if (iNTERNALTERRITORYNUMBER.HasValue)
            {
                iNTERNALTERRITORYNUMBERParameter = new ObjectParameter("INTERNALTERRITORYNUMBER", iNTERNALTERRITORYNUMBER);
            }
            else
            {
                iNTERNALTERRITORYNUMBERParameter = new ObjectParameter("INTERNALTERRITORYNUMBER", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("addresses_AddWithPK", iDADDRESSParameter, sTREETParameter, nUMBERParameter, aDDRESSDATAParameter, cORNER1Parameter, cORNER2Parameter, pHONE1Parameter, pHONE2Parameter, dESCRIPTIONParameter, mAP1Parameter, mAP2Parameter, iDTERRITORYParameter, iDCITYParameter, cUSTOMFIELD1Parameter, cUSTOMFIELD2Parameter, lATParameter, lNGParameter, iNTERNALTERRITORYNUMBERParameter);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TerritoriesModel", Name="Address")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Address : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Address object.
        /// </summary>
        /// <param name="idAddress">Initial value of the IdAddress property.</param>
        /// <param name="street">Initial value of the Street property.</param>
        public static Address CreateAddress(global::System.Int32 idAddress, global::System.String street)
        {
            Address address = new Address();
            address.IdAddress = idAddress;
            address.Street = street;
            return address;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdAddress
        {
            get
            {
                return _IdAddress;
            }
            set
            {
                if (_IdAddress != value)
                {
                    OnIdAddressChanging(value);
                    ReportPropertyChanging("IdAddress");
                    _IdAddress = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdAddress");
                    OnIdAddressChanged();
                }
            }
        }
        private global::System.Int32 _IdAddress;
        partial void OnIdAddressChanging(global::System.Int32 value);
        partial void OnIdAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                OnStreetChanging(value);
                ReportPropertyChanging("Street");
                _Street = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Street");
                OnStreetChanged();
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Number
        {
            get
            {
                return _Number;
            }
            set
            {
                OnNumberChanging(value);
                ReportPropertyChanging("Number");
                _Number = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Number");
                OnNumberChanged();
            }
        }
        private global::System.String _Number;
        partial void OnNumberChanging(global::System.String value);
        partial void OnNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Corner1
        {
            get
            {
                return _Corner1;
            }
            set
            {
                OnCorner1Changing(value);
                ReportPropertyChanging("Corner1");
                _Corner1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Corner1");
                OnCorner1Changed();
            }
        }
        private global::System.String _Corner1;
        partial void OnCorner1Changing(global::System.String value);
        partial void OnCorner1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Corner2
        {
            get
            {
                return _Corner2;
            }
            set
            {
                OnCorner2Changing(value);
                ReportPropertyChanging("Corner2");
                _Corner2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Corner2");
                OnCorner2Changed();
            }
        }
        private global::System.String _Corner2;
        partial void OnCorner2Changing(global::System.String value);
        partial void OnCorner2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone1
        {
            get
            {
                return _Phone1;
            }
            set
            {
                OnPhone1Changing(value);
                ReportPropertyChanging("Phone1");
                _Phone1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone1");
                OnPhone1Changed();
            }
        }
        private global::System.String _Phone1;
        partial void OnPhone1Changing(global::System.String value);
        partial void OnPhone1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone2
        {
            get
            {
                return _Phone2;
            }
            set
            {
                OnPhone2Changing(value);
                ReportPropertyChanging("Phone2");
                _Phone2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone2");
                OnPhone2Changed();
            }
        }
        private global::System.String _Phone2;
        partial void OnPhone2Changing(global::System.String value);
        partial void OnPhone2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Map1
        {
            get
            {
                return _Map1;
            }
            set
            {
                OnMap1Changing(value);
                ReportPropertyChanging("Map1");
                _Map1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Map1");
                OnMap1Changed();
            }
        }
        private global::System.String _Map1;
        partial void OnMap1Changing(global::System.String value);
        partial void OnMap1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Map2
        {
            get
            {
                return _Map2;
            }
            set
            {
                OnMap2Changing(value);
                ReportPropertyChanging("Map2");
                _Map2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Map2");
                OnMap2Changed();
            }
        }
        private global::System.String _Map2;
        partial void OnMap2Changing(global::System.String value);
        partial void OnMap2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AddressData
        {
            get
            {
                return _AddressData;
            }
            set
            {
                OnAddressDataChanging(value);
                ReportPropertyChanging("AddressData");
                _AddressData = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AddressData");
                OnAddressDataChanged();
            }
        }
        private global::System.String _AddressData;
        partial void OnAddressDataChanging(global::System.String value);
        partial void OnAddressDataChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CustomField1
        {
            get
            {
                return _CustomField1;
            }
            set
            {
                OnCustomField1Changing(value);
                ReportPropertyChanging("CustomField1");
                _CustomField1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CustomField1");
                OnCustomField1Changed();
            }
        }
        private global::System.String _CustomField1;
        partial void OnCustomField1Changing(global::System.String value);
        partial void OnCustomField1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CustomField2
        {
            get
            {
                return _CustomField2;
            }
            set
            {
                OnCustomField2Changing(value);
                ReportPropertyChanging("CustomField2");
                _CustomField2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CustomField2");
                OnCustomField2Changed();
            }
        }
        private global::System.String _CustomField2;
        partial void OnCustomField2Changing(global::System.String value);
        partial void OnCustomField2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Lat
        {
            get
            {
                return _Lat;
            }
            set
            {
                OnLatChanging(value);
                ReportPropertyChanging("Lat");
                _Lat = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Lat");
                OnLatChanged();
            }
        }
        private Nullable<global::System.Double> _Lat;
        partial void OnLatChanging(Nullable<global::System.Double> value);
        partial void OnLatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Lng
        {
            get
            {
                return _Lng;
            }
            set
            {
                OnLngChanging(value);
                ReportPropertyChanging("Lng");
                _Lng = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Lng");
                OnLngChanged();
            }
        }
        private Nullable<global::System.Double> _Lng;
        partial void OnLngChanging(Nullable<global::System.Double> value);
        partial void OnLngChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> InternalTerritoryNumber
        {
            get
            {
                return _InternalTerritoryNumber;
            }
            set
            {
                OnInternalTerritoryNumberChanging(value);
                ReportPropertyChanging("InternalTerritoryNumber");
                _InternalTerritoryNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("InternalTerritoryNumber");
                OnInternalTerritoryNumberChanged();
            }
        }
        private Nullable<global::System.Int32> _InternalTerritoryNumber;
        partial void OnInternalTerritoryNumberChanging(Nullable<global::System.Int32> value);
        partial void OnInternalTerritoryNumberChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "ADDRESSESKEY0", "Cities")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("TerritoriesModel.ADDRESSESKEY0", "Cities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("TerritoriesModel.ADDRESSESKEY0", "Cities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("TerritoriesModel.ADDRESSESKEY0", "Cities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("TerritoriesModel.ADDRESSESKEY0", "Cities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "ADDRESSESKEY1", "Territories")]
        public Territory Territory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Territory>("TerritoriesModel.ADDRESSESKEY1", "Territories").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Territory>("TerritoriesModel.ADDRESSESKEY1", "Territories").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Territory> TerritoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Territory>("TerritoriesModel.ADDRESSESKEY1", "Territories");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Territory>("TerritoriesModel.ADDRESSESKEY1", "Territories", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TerritoriesModel", Name="City")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class City : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new City object.
        /// </summary>
        /// <param name="idCity">Initial value of the IdCity property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static City CreateCity(global::System.Int32 idCity, global::System.String name)
        {
            City city = new City();
            city.IdCity = idCity;
            city.Name = name;
            return city;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdCity
        {
            get
            {
                return _IdCity;
            }
            set
            {
                if (_IdCity != value)
                {
                    OnIdCityChanging(value);
                    ReportPropertyChanging("IdCity");
                    _IdCity = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdCity");
                    OnIdCityChanged();
                }
            }
        }
        private global::System.Int32 _IdCity;
        partial void OnIdCityChanging(global::System.Int32 value);
        partial void OnIdCityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Area
        {
            get
            {
                return _Area;
            }
            set
            {
                OnAreaChanging(value);
                ReportPropertyChanging("Area");
                _Area = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Area");
                OnAreaChanged();
            }
        }
        private global::System.String _Area;
        partial void OnAreaChanging(global::System.String value);
        partial void OnAreaChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "ADDRESSESKEY0", "Addresses")]
        public EntityCollection<Address> Addresses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Address>("TerritoriesModel.ADDRESSESKEY0", "Addresses");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Address>("TerritoriesModel.ADDRESSESKEY0", "Addresses", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "CITIESKEY0", "Departments")]
        public Department Department
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Department>("TerritoriesModel.CITIESKEY0", "Departments").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Department>("TerritoriesModel.CITIESKEY0", "Departments").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Department> DepartmentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Department>("TerritoriesModel.CITIESKEY0", "Departments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Department>("TerritoriesModel.CITIESKEY0", "Departments", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "PUBLISHERSKEY0", "Publishers")]
        public EntityCollection<Publisher> Publishers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Publisher>("TerritoriesModel.PUBLISHERSKEY0", "Publishers");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Publisher>("TerritoriesModel.PUBLISHERSKEY0", "Publishers", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TerritoriesModel", Name="Department")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Department : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Department object.
        /// </summary>
        /// <param name="idDepartment">Initial value of the IdDepartment property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Department CreateDepartment(global::System.Int32 idDepartment, global::System.String name)
        {
            Department department = new Department();
            department.IdDepartment = idDepartment;
            department.Name = name;
            return department;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdDepartment
        {
            get
            {
                return _IdDepartment;
            }
            set
            {
                if (_IdDepartment != value)
                {
                    OnIdDepartmentChanging(value);
                    ReportPropertyChanging("IdDepartment");
                    _IdDepartment = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdDepartment");
                    OnIdDepartmentChanged();
                }
            }
        }
        private global::System.Int32 _IdDepartment;
        partial void OnIdDepartmentChanging(global::System.Int32 value);
        partial void OnIdDepartmentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Area
        {
            get
            {
                return _Area;
            }
            set
            {
                OnAreaChanging(value);
                ReportPropertyChanging("Area");
                _Area = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Area");
                OnAreaChanged();
            }
        }
        private global::System.String _Area;
        partial void OnAreaChanging(global::System.String value);
        partial void OnAreaChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "CITIESKEY0", "Cities")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("TerritoriesModel.CITIESKEY0", "Cities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("TerritoriesModel.CITIESKEY0", "Cities", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TerritoriesModel", Name="Publisher")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Publisher : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Publisher object.
        /// </summary>
        /// <param name="idPublisher">Initial value of the IdPublisher property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="notes">Initial value of the Notes property.</param>
        public static Publisher CreatePublisher(global::System.Int32 idPublisher, global::System.String name, global::System.String notes)
        {
            Publisher publisher = new Publisher();
            publisher.IdPublisher = idPublisher;
            publisher.Name = name;
            publisher.Notes = notes;
            return publisher;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdPublisher
        {
            get
            {
                return _IdPublisher;
            }
            set
            {
                if (_IdPublisher != value)
                {
                    OnIdPublisherChanging(value);
                    ReportPropertyChanging("IdPublisher");
                    _IdPublisher = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdPublisher");
                    OnIdPublisherChanged();
                }
            }
        }
        private global::System.Int32 _IdPublisher;
        partial void OnIdPublisherChanging(global::System.Int32 value);
        partial void OnIdPublisherChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone1
        {
            get
            {
                return _Phone1;
            }
            set
            {
                OnPhone1Changing(value);
                ReportPropertyChanging("Phone1");
                _Phone1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone1");
                OnPhone1Changed();
            }
        }
        private global::System.String _Phone1;
        partial void OnPhone1Changing(global::System.String value);
        partial void OnPhone1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone2
        {
            get
            {
                return _Phone2;
            }
            set
            {
                OnPhone2Changing(value);
                ReportPropertyChanging("Phone2");
                _Phone2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone2");
                OnPhone2Changed();
            }
        }
        private global::System.String _Phone2;
        partial void OnPhone2Changing(global::System.String value);
        partial void OnPhone2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Zip
        {
            get
            {
                return _Zip;
            }
            set
            {
                OnZipChanging(value);
                ReportPropertyChanging("Zip");
                _Zip = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Zip");
                OnZipChanged();
            }
        }
        private global::System.String _Zip;
        partial void OnZipChanging(global::System.String value);
        partial void OnZipChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "PUBLISHERSKEY0", "Cities")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("TerritoriesModel.PUBLISHERSKEY0", "Cities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("TerritoriesModel.PUBLISHERSKEY0", "Cities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("TerritoriesModel.PUBLISHERSKEY0", "Cities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("TerritoriesModel.PUBLISHERSKEY0", "Cities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "TOURSKEY0", "Tours")]
        public EntityCollection<Tour> Tours
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Tour>("TerritoriesModel.TOURSKEY0", "Tours");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Tour>("TerritoriesModel.TOURSKEY0", "Tours", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TerritoriesModel", Name="Territory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Territory : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Territory object.
        /// </summary>
        /// <param name="idTerritory">Initial value of the IdTerritory property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Territory CreateTerritory(global::System.Int32 idTerritory, global::System.String name)
        {
            Territory territory = new Territory();
            territory.IdTerritory = idTerritory;
            territory.Name = name;
            return territory;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdTerritory
        {
            get
            {
                return _IdTerritory;
            }
            set
            {
                if (_IdTerritory != value)
                {
                    OnIdTerritoryChanging(value);
                    ReportPropertyChanging("IdTerritory");
                    _IdTerritory = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdTerritory");
                    OnIdTerritoryChanged();
                }
            }
        }
        private global::System.Int32 _IdTerritory;
        partial void OnIdTerritoryChanging(global::System.Int32 value);
        partial void OnIdTerritoryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Number
        {
            get
            {
                return _Number;
            }
            set
            {
                OnNumberChanging(value);
                ReportPropertyChanging("Number");
                _Number = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Number");
                OnNumberChanged();
            }
        }
        private Nullable<global::System.Int32> _Number;
        partial void OnNumberChanging(Nullable<global::System.Int32> value);
        partial void OnNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Area
        {
            get
            {
                return _Area;
            }
            set
            {
                OnAreaChanging(value);
                ReportPropertyChanging("Area");
                _Area = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Area");
                OnAreaChanged();
            }
        }
        private global::System.String _Area;
        partial void OnAreaChanging(global::System.String value);
        partial void OnAreaChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "ADDRESSESKEY1", "Addresses")]
        public EntityCollection<Address> Addresses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Address>("TerritoriesModel.ADDRESSESKEY1", "Addresses");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Address>("TerritoriesModel.ADDRESSESKEY1", "Addresses", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "TOURSKEY1", "Tours")]
        public EntityCollection<Tour> Tours
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Tour>("TerritoriesModel.TOURSKEY1", "Tours");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Tour>("TerritoriesModel.TOURSKEY1", "Tours", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TerritoriesModel", Name="Tour")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Tour : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Tour object.
        /// </summary>
        /// <param name="idTerritory">Initial value of the IdTerritory property.</param>
        /// <param name="startDate">Initial value of the StartDate property.</param>
        /// <param name="tourNumber">Initial value of the TourNumber property.</param>
        public static Tour CreateTour(global::System.Int32 idTerritory, global::System.DateTime startDate, global::System.Int32 tourNumber)
        {
            Tour tour = new Tour();
            tour.IdTerritory = idTerritory;
            tour.StartDate = startDate;
            tour.TourNumber = tourNumber;
            return tour;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdTerritory
        {
            get
            {
                return _IdTerritory;
            }
            set
            {
                if (_IdTerritory != value)
                {
                    OnIdTerritoryChanging(value);
                    ReportPropertyChanging("IdTerritory");
                    _IdTerritory = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdTerritory");
                    OnIdTerritoryChanged();
                }
            }
        }
        private global::System.Int32 _IdTerritory;
        partial void OnIdTerritoryChanging(global::System.Int32 value);
        partial void OnIdTerritoryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                OnStartDateChanging(value);
                ReportPropertyChanging("StartDate");
                _StartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDate");
                OnStartDateChanged();
            }
        }
        private global::System.DateTime _StartDate;
        partial void OnStartDateChanging(global::System.DateTime value);
        partial void OnStartDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> EndDate
        {
            get
            {
                return _EndDate;
            }
            set
            {
                OnEndDateChanging(value);
                ReportPropertyChanging("EndDate");
                _EndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndDate");
                OnEndDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _EndDate;
        partial void OnEndDateChanging(Nullable<global::System.DateTime> value);
        partial void OnEndDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TourNumber
        {
            get
            {
                return _TourNumber;
            }
            set
            {
                if (_TourNumber != value)
                {
                    OnTourNumberChanging(value);
                    ReportPropertyChanging("TourNumber");
                    _TourNumber = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TourNumber");
                    OnTourNumberChanged();
                }
            }
        }
        private global::System.Int32 _TourNumber;
        partial void OnTourNumberChanging(global::System.Int32 value);
        partial void OnTourNumberChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "TOURSKEY0", "Publishers")]
        public Publisher Publisher
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Publisher>("TerritoriesModel.TOURSKEY0", "Publishers").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Publisher>("TerritoriesModel.TOURSKEY0", "Publishers").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Publisher> PublisherReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Publisher>("TerritoriesModel.TOURSKEY0", "Publishers");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Publisher>("TerritoriesModel.TOURSKEY0", "Publishers", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TerritoriesModel", "TOURSKEY1", "Territories")]
        public Territory Territory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Territory>("TerritoriesModel.TOURSKEY1", "Territories").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Territory>("TerritoriesModel.TOURSKEY1", "Territories").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Territory> TerritoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Territory>("TerritoriesModel.TOURSKEY1", "Territories");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Territory>("TerritoriesModel.TOURSKEY1", "Territories", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
