#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Territories.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Territories")]
	public partial class TerritoriesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertTour(Tour instance);
    partial void UpdateTour(Tour instance);
    partial void DeleteTour(Tour instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDirection(Direction instance);
    partial void UpdateDirection(Direction instance);
    partial void DeleteDirection(Direction instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertPublisher(Publisher instance);
    partial void UpdatePublisher(Publisher instance);
    partial void DeletePublisher(Publisher instance);
    partial void InsertTerritory(Territory instance);
    partial void UpdateTerritory(Territory instance);
    partial void DeleteTerritory(Territory instance);
    #endregion
		
		public TerritoriesDataContext() : 
				base(global::Territories.DAL.Properties.Settings.Default.territoriesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TerritoriesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TerritoriesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TerritoriesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TerritoriesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Tour> Tours
		{
			get
			{
				return this.GetTable<Tour>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Direction> Directions
		{
			get
			{
				return this.GetTable<Direction>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Publisher> Publishers
		{
			get
			{
				return this.GetTable<Publisher>();
			}
		}
		
		public System.Data.Linq.Table<Territory> Territories
		{
			get
			{
				return this.GetTable<Territory>();
			}
		}
		
		[Function(Name="dbo.cities_Add")]
		public int cities_Add([Parameter(DbType="Int")] System.Nullable<int> id, [Parameter(DbType="NVarChar(50)")] string name, [Parameter(DbType="Int")] System.Nullable<int> department)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, department);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.cities_UpdateById")]
		public int cities_UpdateById([Parameter(DbType="Int")] System.Nullable<int> id, [Parameter(DbType="NVarChar(50)")] string name, [Parameter(DbType="Int")] System.Nullable<int> department)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, department);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.cities_DeleteById")]
		public int cities_DeleteById([Parameter(DbType="Int")] System.Nullable<int> id, [Parameter(DbType="Int")] System.Nullable<int> idDepartment)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, idDepartment);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.cities_GetAll")]
		public int cities_GetAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.cities_GetById")]
		public ISingleResult<cities_GetByIdResult> cities_GetById([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<cities_GetByIdResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.cities_GetByIdDepartment")]
		public ISingleResult<cities_GetByIdDepartmentResult> cities_GetByIdDepartment([Parameter(DbType="Int")] System.Nullable<int> department)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), department);
			return ((ISingleResult<cities_GetByIdDepartmentResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCity;
		
		private string _Name;
		
		private int _IdDepartment;
		
		private EntitySet<Direction> _Directions;
		
		private EntitySet<Publisher> _Publishers;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCityChanging(int value);
    partial void OnIdCityChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdDepartmentChanging(int value);
    partial void OnIdDepartmentChanged();
    #endregion
		
		public City()
		{
			this._Directions = new EntitySet<Direction>(new Action<Direction>(this.attach_Directions), new Action<Direction>(this.detach_Directions));
			this._Publishers = new EntitySet<Publisher>(new Action<Publisher>(this.attach_Publishers), new Action<Publisher>(this.detach_Publishers));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_IdCity", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdCity
		{
			get
			{
				return this._IdCity;
			}
			set
			{
				if ((this._IdCity != value))
				{
					this.OnIdCityChanging(value);
					this.SendPropertyChanging();
					this._IdCity = value;
					this.SendPropertyChanged("IdCity");
					this.OnIdCityChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_IdDepartment", DbType="Int NOT NULL")]
		public int IdDepartment
		{
			get
			{
				return this._IdDepartment;
			}
			set
			{
				if ((this._IdDepartment != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdDepartmentChanging(value);
					this.SendPropertyChanging();
					this._IdDepartment = value;
					this.SendPropertyChanged("IdDepartment");
					this.OnIdDepartmentChanged();
				}
			}
		}
		
		[Association(Name="City_Direction", Storage="_Directions", ThisKey="IdCity", OtherKey="IdCity")]
		public EntitySet<Direction> Directions
		{
			get
			{
				return this._Directions;
			}
			set
			{
				this._Directions.Assign(value);
			}
		}
		
		[Association(Name="City_Publisher", Storage="_Publishers", ThisKey="IdCity", OtherKey="IdCity")]
		public EntitySet<Publisher> Publishers
		{
			get
			{
				return this._Publishers;
			}
			set
			{
				this._Publishers.Assign(value);
			}
		}
		
		[Association(Name="Department_City", Storage="_Department", ThisKey="IdDepartment", OtherKey="IdDepartment", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._IdDepartment = value.IdDepartment;
					}
					else
					{
						this._IdDepartment = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Directions(Direction entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Directions(Direction entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Publishers(Publisher entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Publishers(Publisher entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[Table(Name="dbo.Tours")]
	public partial class Tour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTerritory;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private int _TourNumber;
		
		private System.Nullable<int> _IdPublisher;
		
		private EntityRef<Publisher> _Publisher;
		
		private EntityRef<Territory> _Territory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTerritoryChanging(int value);
    partial void OnIdTerritoryChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnTourNumberChanging(int value);
    partial void OnTourNumberChanged();
    partial void OnIdPublisherChanging(System.Nullable<int> value);
    partial void OnIdPublisherChanged();
    #endregion
		
		public Tour()
		{
			this._Publisher = default(EntityRef<Publisher>);
			this._Territory = default(EntityRef<Territory>);
			OnCreated();
		}
		
		[Column(Storage="_IdTerritory", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdTerritory
		{
			get
			{
				return this._IdTerritory;
			}
			set
			{
				if ((this._IdTerritory != value))
				{
					if (this._Territory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTerritoryChanging(value);
					this.SendPropertyChanging();
					this._IdTerritory = value;
					this.SendPropertyChanged("IdTerritory");
					this.OnIdTerritoryChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_TourNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TourNumber
		{
			get
			{
				return this._TourNumber;
			}
			set
			{
				if ((this._TourNumber != value))
				{
					this.OnTourNumberChanging(value);
					this.SendPropertyChanging();
					this._TourNumber = value;
					this.SendPropertyChanged("TourNumber");
					this.OnTourNumberChanged();
				}
			}
		}
		
		[Column(Storage="_IdPublisher", DbType="Int")]
		public System.Nullable<int> IdPublisher
		{
			get
			{
				return this._IdPublisher;
			}
			set
			{
				if ((this._IdPublisher != value))
				{
					if (this._Publisher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPublisherChanging(value);
					this.SendPropertyChanging();
					this._IdPublisher = value;
					this.SendPropertyChanged("IdPublisher");
					this.OnIdPublisherChanged();
				}
			}
		}
		
		[Association(Name="Publisher_Tour", Storage="_Publisher", ThisKey="IdPublisher", OtherKey="IdPublisher", IsForeignKey=true)]
		public Publisher Publisher
		{
			get
			{
				return this._Publisher.Entity;
			}
			set
			{
				Publisher previousValue = this._Publisher.Entity;
				if (((previousValue != value) 
							|| (this._Publisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publisher.Entity = null;
						previousValue.Tours.Remove(this);
					}
					this._Publisher.Entity = value;
					if ((value != null))
					{
						value.Tours.Add(this);
						this._IdPublisher = value.IdPublisher;
					}
					else
					{
						this._IdPublisher = default(Nullable<int>);
					}
					this.SendPropertyChanged("Publisher");
				}
			}
		}
		
		[Association(Name="Territory_Tour", Storage="_Territory", ThisKey="IdTerritory", OtherKey="IdTerritory", IsForeignKey=true)]
		public Territory Territory
		{
			get
			{
				return this._Territory.Entity;
			}
			set
			{
				Territory previousValue = this._Territory.Entity;
				if (((previousValue != value) 
							|| (this._Territory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Territory.Entity = null;
						previousValue.Tours.Remove(this);
					}
					this._Territory.Entity = value;
					if ((value != null))
					{
						value.Tours.Add(this);
						this._IdTerritory = value.IdTerritory;
					}
					else
					{
						this._IdTerritory = default(int);
					}
					this.SendPropertyChanged("Territory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdDepartment;
		
		private string _Name;
		
		private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDepartmentChanging(int value);
    partial void OnIdDepartmentChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Department()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[Column(Storage="_IdDepartment", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdDepartment
		{
			get
			{
				return this._IdDepartment;
			}
			set
			{
				if ((this._IdDepartment != value))
				{
					this.OnIdDepartmentChanging(value);
					this.SendPropertyChanging();
					this._IdDepartment = value;
					this.SendPropertyChanged("IdDepartment");
					this.OnIdDepartmentChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Department_City", Storage="_Cities", ThisKey="IdDepartment", OtherKey="IdDepartment")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="dbo.Directions")]
	public partial class Direction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdDirection;
		
		private string _StreetAndNumber;
		
		private string _Corner1;
		
		private string _Corner2;
		
		private string _Phone1;
		
		private string _Phone2;
		
		private string _Description;
		
		private string _Map1;
		
		private string _Map2;
		
		private string _GeoPosition;
		
		private System.Nullable<int> _IdTerritory;
		
		private int _IdCity;
		
		private EntityRef<City> _City;
		
		private EntityRef<Territory> _Territory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDirectionChanging(int value);
    partial void OnIdDirectionChanged();
    partial void OnStreetAndNumberChanging(string value);
    partial void OnStreetAndNumberChanged();
    partial void OnCorner1Changing(string value);
    partial void OnCorner1Changed();
    partial void OnCorner2Changing(string value);
    partial void OnCorner2Changed();
    partial void OnPhone1Changing(string value);
    partial void OnPhone1Changed();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMap1Changing(string value);
    partial void OnMap1Changed();
    partial void OnMap2Changing(string value);
    partial void OnMap2Changed();
    partial void OnGeoPositionChanging(string value);
    partial void OnGeoPositionChanged();
    partial void OnIdTerritoryChanging(System.Nullable<int> value);
    partial void OnIdTerritoryChanged();
    partial void OnIdCityChanging(int value);
    partial void OnIdCityChanged();
    #endregion
		
		public Direction()
		{
			this._City = default(EntityRef<City>);
			this._Territory = default(EntityRef<Territory>);
			OnCreated();
		}
		
		[Column(Storage="_IdDirection", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdDirection
		{
			get
			{
				return this._IdDirection;
			}
			set
			{
				if ((this._IdDirection != value))
				{
					this.OnIdDirectionChanging(value);
					this.SendPropertyChanging();
					this._IdDirection = value;
					this.SendPropertyChanged("IdDirection");
					this.OnIdDirectionChanged();
				}
			}
		}
		
		[Column(Storage="_StreetAndNumber", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StreetAndNumber
		{
			get
			{
				return this._StreetAndNumber;
			}
			set
			{
				if ((this._StreetAndNumber != value))
				{
					this.OnStreetAndNumberChanging(value);
					this.SendPropertyChanging();
					this._StreetAndNumber = value;
					this.SendPropertyChanged("StreetAndNumber");
					this.OnStreetAndNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Corner1", DbType="NVarChar(MAX)")]
		public string Corner1
		{
			get
			{
				return this._Corner1;
			}
			set
			{
				if ((this._Corner1 != value))
				{
					this.OnCorner1Changing(value);
					this.SendPropertyChanging();
					this._Corner1 = value;
					this.SendPropertyChanged("Corner1");
					this.OnCorner1Changed();
				}
			}
		}
		
		[Column(Storage="_Corner2", DbType="NVarChar(MAX)")]
		public string Corner2
		{
			get
			{
				return this._Corner2;
			}
			set
			{
				if ((this._Corner2 != value))
				{
					this.OnCorner2Changing(value);
					this.SendPropertyChanging();
					this._Corner2 = value;
					this.SendPropertyChanged("Corner2");
					this.OnCorner2Changed();
				}
			}
		}
		
		[Column(Storage="_Phone1", DbType="NVarChar(50)")]
		public string Phone1
		{
			get
			{
				return this._Phone1;
			}
			set
			{
				if ((this._Phone1 != value))
				{
					this.OnPhone1Changing(value);
					this.SendPropertyChanging();
					this._Phone1 = value;
					this.SendPropertyChanged("Phone1");
					this.OnPhone1Changed();
				}
			}
		}
		
		[Column(Storage="_Phone2", DbType="NVarChar(50)")]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Map1", DbType="NVarChar(50)")]
		public string Map1
		{
			get
			{
				return this._Map1;
			}
			set
			{
				if ((this._Map1 != value))
				{
					this.OnMap1Changing(value);
					this.SendPropertyChanging();
					this._Map1 = value;
					this.SendPropertyChanged("Map1");
					this.OnMap1Changed();
				}
			}
		}
		
		[Column(Storage="_Map2", DbType="NVarChar(50)")]
		public string Map2
		{
			get
			{
				return this._Map2;
			}
			set
			{
				if ((this._Map2 != value))
				{
					this.OnMap2Changing(value);
					this.SendPropertyChanging();
					this._Map2 = value;
					this.SendPropertyChanged("Map2");
					this.OnMap2Changed();
				}
			}
		}
		
		[Column(Storage="_GeoPosition", DbType="NVarChar(50)")]
		public string GeoPosition
		{
			get
			{
				return this._GeoPosition;
			}
			set
			{
				if ((this._GeoPosition != value))
				{
					this.OnGeoPositionChanging(value);
					this.SendPropertyChanging();
					this._GeoPosition = value;
					this.SendPropertyChanged("GeoPosition");
					this.OnGeoPositionChanged();
				}
			}
		}
		
		[Column(Storage="_IdTerritory", DbType="Int")]
		public System.Nullable<int> IdTerritory
		{
			get
			{
				return this._IdTerritory;
			}
			set
			{
				if ((this._IdTerritory != value))
				{
					if (this._Territory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTerritoryChanging(value);
					this.SendPropertyChanging();
					this._IdTerritory = value;
					this.SendPropertyChanged("IdTerritory");
					this.OnIdTerritoryChanged();
				}
			}
		}
		
		[Column(Storage="_IdCity", DbType="Int NOT NULL")]
		public int IdCity
		{
			get
			{
				return this._IdCity;
			}
			set
			{
				if ((this._IdCity != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCityChanging(value);
					this.SendPropertyChanging();
					this._IdCity = value;
					this.SendPropertyChanged("IdCity");
					this.OnIdCityChanged();
				}
			}
		}
		
		[Association(Name="City_Direction", Storage="_City", ThisKey="IdCity", OtherKey="IdCity", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Directions.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Directions.Add(this);
						this._IdCity = value.IdCity;
					}
					else
					{
						this._IdCity = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[Association(Name="Territory_Direction", Storage="_Territory", ThisKey="IdTerritory", OtherKey="IdTerritory", IsForeignKey=true)]
		public Territory Territory
		{
			get
			{
				return this._Territory.Entity;
			}
			set
			{
				Territory previousValue = this._Territory.Entity;
				if (((previousValue != value) 
							|| (this._Territory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Territory.Entity = null;
						previousValue.Directions.Remove(this);
					}
					this._Territory.Entity = value;
					if ((value != null))
					{
						value.Directions.Add(this);
						this._IdTerritory = value.IdTerritory;
					}
					else
					{
						this._IdTerritory = default(Nullable<int>);
					}
					this.SendPropertyChanged("Territory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdGroup;
		
		private string _Description;
		
		private System.Nullable<int> _Captain;
		
		private System.Nullable<int> _Auxiliar;
		
		private EntitySet<Publisher> _Publishers;
		
		private EntitySet<Territory> _Territories;
		
		private EntityRef<Publisher> _Publisher;
		
		private EntityRef<Publisher> _Publisher1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdGroupChanging(int value);
    partial void OnIdGroupChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCaptainChanging(System.Nullable<int> value);
    partial void OnCaptainChanged();
    partial void OnAuxiliarChanging(System.Nullable<int> value);
    partial void OnAuxiliarChanged();
    #endregion
		
		public Group()
		{
			this._Publishers = new EntitySet<Publisher>(new Action<Publisher>(this.attach_Publishers), new Action<Publisher>(this.detach_Publishers));
			this._Territories = new EntitySet<Territory>(new Action<Territory>(this.attach_Territories), new Action<Territory>(this.detach_Territories));
			this._Publisher = default(EntityRef<Publisher>);
			this._Publisher1 = default(EntityRef<Publisher>);
			OnCreated();
		}
		
		[Column(Storage="_IdGroup", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdGroup
		{
			get
			{
				return this._IdGroup;
			}
			set
			{
				if ((this._IdGroup != value))
				{
					this.OnIdGroupChanging(value);
					this.SendPropertyChanging();
					this._IdGroup = value;
					this.SendPropertyChanged("IdGroup");
					this.OnIdGroupChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Captain", DbType="Int")]
		public System.Nullable<int> Captain
		{
			get
			{
				return this._Captain;
			}
			set
			{
				if ((this._Captain != value))
				{
					if (this._Publisher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCaptainChanging(value);
					this.SendPropertyChanging();
					this._Captain = value;
					this.SendPropertyChanged("Captain");
					this.OnCaptainChanged();
				}
			}
		}
		
		[Column(Storage="_Auxiliar", DbType="Int")]
		public System.Nullable<int> Auxiliar
		{
			get
			{
				return this._Auxiliar;
			}
			set
			{
				if ((this._Auxiliar != value))
				{
					if (this._Publisher1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuxiliarChanging(value);
					this.SendPropertyChanging();
					this._Auxiliar = value;
					this.SendPropertyChanged("Auxiliar");
					this.OnAuxiliarChanged();
				}
			}
		}
		
		[Association(Name="Group_Publisher", Storage="_Publishers", ThisKey="IdGroup", OtherKey="IdGroup")]
		public EntitySet<Publisher> Publishers
		{
			get
			{
				return this._Publishers;
			}
			set
			{
				this._Publishers.Assign(value);
			}
		}
		
		[Association(Name="Group_Territory", Storage="_Territories", ThisKey="IdGroup", OtherKey="IdGroup")]
		public EntitySet<Territory> Territories
		{
			get
			{
				return this._Territories;
			}
			set
			{
				this._Territories.Assign(value);
			}
		}
		
		[Association(Name="Publisher_Group", Storage="_Publisher", ThisKey="Captain", OtherKey="IdPublisher", IsForeignKey=true)]
		public Publisher Publisher
		{
			get
			{
				return this._Publisher.Entity;
			}
			set
			{
				Publisher previousValue = this._Publisher.Entity;
				if (((previousValue != value) 
							|| (this._Publisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publisher.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Publisher.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._Captain = value.IdPublisher;
					}
					else
					{
						this._Captain = default(Nullable<int>);
					}
					this.SendPropertyChanged("Publisher");
				}
			}
		}
		
		[Association(Name="Publisher_Group1", Storage="_Publisher1", ThisKey="Auxiliar", OtherKey="IdPublisher", IsForeignKey=true)]
		public Publisher Publisher1
		{
			get
			{
				return this._Publisher1.Entity;
			}
			set
			{
				Publisher previousValue = this._Publisher1.Entity;
				if (((previousValue != value) 
							|| (this._Publisher1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publisher1.Entity = null;
						previousValue.Groups1.Remove(this);
					}
					this._Publisher1.Entity = value;
					if ((value != null))
					{
						value.Groups1.Add(this);
						this._Auxiliar = value.IdPublisher;
					}
					else
					{
						this._Auxiliar = default(Nullable<int>);
					}
					this.SendPropertyChanged("Publisher1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Publishers(Publisher entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Publishers(Publisher entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Territories(Territory entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Territories(Territory entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[Table(Name="dbo.Publishers")]
	public partial class Publisher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdPublisher;
		
		private string _Name;
		
		private string _Direction;
		
		private System.Nullable<int> _IdCity;
		
		private System.Nullable<int> _IdGroup;
		
		private string _Notes;
		
		private string _Phone1;
		
		private string _Phone2;
		
		private string _Zip;
		
		private EntitySet<Tour> _Tours;
		
		private EntitySet<Group> _Groups;
		
		private EntitySet<Group> _Groups1;
		
		private EntityRef<City> _City;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPublisherChanging(int value);
    partial void OnIdPublisherChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDirectionChanging(string value);
    partial void OnDirectionChanged();
    partial void OnIdCityChanging(System.Nullable<int> value);
    partial void OnIdCityChanged();
    partial void OnIdGroupChanging(System.Nullable<int> value);
    partial void OnIdGroupChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnPhone1Changing(string value);
    partial void OnPhone1Changed();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    #endregion
		
		public Publisher()
		{
			this._Tours = new EntitySet<Tour>(new Action<Tour>(this.attach_Tours), new Action<Tour>(this.detach_Tours));
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			this._Groups1 = new EntitySet<Group>(new Action<Group>(this.attach_Groups1), new Action<Group>(this.detach_Groups1));
			this._City = default(EntityRef<City>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[Column(Storage="_IdPublisher", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdPublisher
		{
			get
			{
				return this._IdPublisher;
			}
			set
			{
				if ((this._IdPublisher != value))
				{
					this.OnIdPublisherChanging(value);
					this.SendPropertyChanging();
					this._IdPublisher = value;
					this.SendPropertyChanged("IdPublisher");
					this.OnIdPublisherChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Direction", DbType="NVarChar(MAX)")]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this.OnDirectionChanging(value);
					this.SendPropertyChanging();
					this._Direction = value;
					this.SendPropertyChanged("Direction");
					this.OnDirectionChanged();
				}
			}
		}
		
		[Column(Storage="_IdCity", DbType="Int")]
		public System.Nullable<int> IdCity
		{
			get
			{
				return this._IdCity;
			}
			set
			{
				if ((this._IdCity != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCityChanging(value);
					this.SendPropertyChanging();
					this._IdCity = value;
					this.SendPropertyChanged("IdCity");
					this.OnIdCityChanged();
				}
			}
		}
		
		[Column(Storage="_IdGroup", DbType="Int")]
		public System.Nullable<int> IdGroup
		{
			get
			{
				return this._IdGroup;
			}
			set
			{
				if ((this._IdGroup != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdGroupChanging(value);
					this.SendPropertyChanging();
					this._IdGroup = value;
					this.SendPropertyChanged("IdGroup");
					this.OnIdGroupChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_Phone1", DbType="NVarChar(50)")]
		public string Phone1
		{
			get
			{
				return this._Phone1;
			}
			set
			{
				if ((this._Phone1 != value))
				{
					this.OnPhone1Changing(value);
					this.SendPropertyChanging();
					this._Phone1 = value;
					this.SendPropertyChanged("Phone1");
					this.OnPhone1Changed();
				}
			}
		}
		
		[Column(Storage="_Phone2", DbType="NVarChar(50)")]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(50)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Association(Name="Publisher_Tour", Storage="_Tours", ThisKey="IdPublisher", OtherKey="IdPublisher")]
		public EntitySet<Tour> Tours
		{
			get
			{
				return this._Tours;
			}
			set
			{
				this._Tours.Assign(value);
			}
		}
		
		[Association(Name="Publisher_Group", Storage="_Groups", ThisKey="IdPublisher", OtherKey="Captain")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[Association(Name="Publisher_Group1", Storage="_Groups1", ThisKey="IdPublisher", OtherKey="Auxiliar")]
		public EntitySet<Group> Groups1
		{
			get
			{
				return this._Groups1;
			}
			set
			{
				this._Groups1.Assign(value);
			}
		}
		
		[Association(Name="City_Publisher", Storage="_City", ThisKey="IdCity", OtherKey="IdCity", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Publishers.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Publishers.Add(this);
						this._IdCity = value.IdCity;
					}
					else
					{
						this._IdCity = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[Association(Name="Group_Publisher", Storage="_Group", ThisKey="IdGroup", OtherKey="IdGroup", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Publishers.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Publishers.Add(this);
						this._IdGroup = value.IdGroup;
					}
					else
					{
						this._IdGroup = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tours(Tour entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = this;
		}
		
		private void detach_Tours(Tour entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = null;
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = null;
		}
		
		private void attach_Groups1(Group entity)
		{
			this.SendPropertyChanging();
			entity.Publisher1 = this;
		}
		
		private void detach_Groups1(Group entity)
		{
			this.SendPropertyChanging();
			entity.Publisher1 = null;
		}
	}
	
	[Table(Name="dbo.Territories")]
	public partial class Territory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTerritory;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Map;
		
		private int _IdGroup;
		
		private EntitySet<Tour> _Tours;
		
		private EntitySet<Direction> _Directions;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTerritoryChanging(int value);
    partial void OnIdTerritoryChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMapChanging(System.Data.Linq.Binary value);
    partial void OnMapChanged();
    partial void OnIdGroupChanging(int value);
    partial void OnIdGroupChanged();
    #endregion
		
		public Territory()
		{
			this._Tours = new EntitySet<Tour>(new Action<Tour>(this.attach_Tours), new Action<Tour>(this.detach_Tours));
			this._Directions = new EntitySet<Direction>(new Action<Direction>(this.attach_Directions), new Action<Direction>(this.detach_Directions));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[Column(Storage="_IdTerritory", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdTerritory
		{
			get
			{
				return this._IdTerritory;
			}
			set
			{
				if ((this._IdTerritory != value))
				{
					this.OnIdTerritoryChanging(value);
					this.SendPropertyChanging();
					this._IdTerritory = value;
					this.SendPropertyChanged("IdTerritory");
					this.OnIdTerritoryChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Map", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[Column(Storage="_IdGroup", DbType="Int NOT NULL")]
		public int IdGroup
		{
			get
			{
				return this._IdGroup;
			}
			set
			{
				if ((this._IdGroup != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdGroupChanging(value);
					this.SendPropertyChanging();
					this._IdGroup = value;
					this.SendPropertyChanged("IdGroup");
					this.OnIdGroupChanged();
				}
			}
		}
		
		[Association(Name="Territory_Tour", Storage="_Tours", ThisKey="IdTerritory", OtherKey="IdTerritory")]
		public EntitySet<Tour> Tours
		{
			get
			{
				return this._Tours;
			}
			set
			{
				this._Tours.Assign(value);
			}
		}
		
		[Association(Name="Territory_Direction", Storage="_Directions", ThisKey="IdTerritory", OtherKey="IdTerritory")]
		public EntitySet<Direction> Directions
		{
			get
			{
				return this._Directions;
			}
			set
			{
				this._Directions.Assign(value);
			}
		}
		
		[Association(Name="Group_Territory", Storage="_Group", ThisKey="IdGroup", OtherKey="IdGroup", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Territories.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Territories.Add(this);
						this._IdGroup = value.IdGroup;
					}
					else
					{
						this._IdGroup = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tours(Tour entity)
		{
			this.SendPropertyChanging();
			entity.Territory = this;
		}
		
		private void detach_Tours(Tour entity)
		{
			this.SendPropertyChanging();
			entity.Territory = null;
		}
		
		private void attach_Directions(Direction entity)
		{
			this.SendPropertyChanging();
			entity.Territory = this;
		}
		
		private void detach_Directions(Direction entity)
		{
			this.SendPropertyChanging();
			entity.Territory = null;
		}
	}
	
	public partial class cities_GetByIdResult
	{
		
		private int _IdCity;
		
		private string _Name;
		
		private int _IdDepartment;
		
		public cities_GetByIdResult()
		{
		}
		
		[Column(Storage="_IdCity", DbType="Int NOT NULL")]
		public int IdCity
		{
			get
			{
				return this._IdCity;
			}
			set
			{
				if ((this._IdCity != value))
				{
					this._IdCity = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_IdDepartment", DbType="Int NOT NULL")]
		public int IdDepartment
		{
			get
			{
				return this._IdDepartment;
			}
			set
			{
				if ((this._IdDepartment != value))
				{
					this._IdDepartment = value;
				}
			}
		}
	}
	
	public partial class cities_GetByIdDepartmentResult
	{
		
		private int _IdCity;
		
		private string _Name;
		
		private int _IdDepartment;
		
		public cities_GetByIdDepartmentResult()
		{
		}
		
		[Column(Storage="_IdCity", DbType="Int NOT NULL")]
		public int IdCity
		{
			get
			{
				return this._IdCity;
			}
			set
			{
				if ((this._IdCity != value))
				{
					this._IdCity = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_IdDepartment", DbType="Int NOT NULL")]
		public int IdDepartment
		{
			get
			{
				return this._IdDepartment;
			}
			set
			{
				if ((this._IdDepartment != value))
				{
					this._IdDepartment = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
